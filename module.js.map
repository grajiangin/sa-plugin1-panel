{"version":3,"file":"module.js","mappings":"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","sources":["webpack://sa-plugin1-panel/external amd \"@grafana/ui\"","webpack://sa-plugin1-panel/external amd \"@emotion/css\"","webpack://sa-plugin1-panel/external amd \"module\"","webpack://sa-plugin1-panel/external amd \"@grafana/runtime\"","webpack://sa-plugin1-panel/external amd \"@grafana/data\"","webpack://sa-plugin1-panel/external amd \"react\"","webpack://sa-plugin1-panel/webpack/bootstrap","webpack://sa-plugin1-panel/webpack/runtime/compat get default export","webpack://sa-plugin1-panel/webpack/runtime/define property getters","webpack://sa-plugin1-panel/webpack/runtime/hasOwnProperty shorthand","webpack://sa-plugin1-panel/webpack/runtime/make namespace object","webpack://sa-plugin1-panel/webpack/runtime/publicPath","webpack://sa-plugin1-panel/./node_modules/grafana-public-path.js","webpack://sa-plugin1-panel/./components/SimplePanel.jsx","webpack://sa-plugin1-panel/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/sa-plugin1-panel/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/sa-plugin1-panel/';\n","import * as React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { PanelProps } from '@grafana/data';\nimport { SimpleOptions } from 'types';\nimport { css, cx } from '@emotion/css';\nimport { useStyles2, Button } from '@grafana/ui';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ReactSVG } from 'react-svg';\n\nconst getStyles = () => {\n  return {\n    wrapper: css`\n      font-family: Open Sans;\n      position: relative;\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      overflow: hidden;\n    `,\n    svgContainer: css`\n      position: relative;\n      width: 100%;\n      height: calc(100% - 80px); /* Reserve space for the text box and button */\n      overflow: hidden;\n      display: flex;\n      background-color: #000;\n      align-items: center;\n      justify-content: center;\n    `,\n    svg: css`\n      width: 100%;\n      height: 100%;\n      background-color: #000;\n\n      & > div {\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      & svg {\n        max-width: 100%;\n        max-height: 100%;\n        width: auto;\n        height: auto;\n        object-fit: contain;\n      }\n    `,\n    controlsContainer: css`\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      padding: 10px;\n      display: flex;\n      justify-content: center;\n      gap: 10px;\n      z-index: 10;\n    `,\n    jsonDisplay: css`\n      background: rgba(0, 0, 0, 0.05);\n      padding: 8px;\n      border-radius: 4px;\n      font-family: monospace;\n      font-size: 12px;\n      max-height: 200px;\n      overflow-y: auto;\n      white-space: pre-wrap;\n    `,\n  };\n};\n\nexport const SimplePanel = ({ options, data, width, height, fieldConfig, id }) => {\n  const styles = useStyles2(getStyles);\n  const [boxColor, setBoxColor] = useState('red');\n  const svgRef = useRef(null);\n  const [allElements, setAllElements] = useState([]);\n  if (data.series.length === 0) {\n    return <PanelDataErrorView fieldConfig={fieldConfig} panelId={id} data={data} needsStringField />;\n  }\n  var ids = {};\n  data.series.forEach((series) => {\n    series.fields.forEach((field) => {\n      if (field.name == 'id') {\n        field.values.forEach((value, index) => {\n          ids[value] = {\n            _index: index,\n          };\n        });\n      }\n    });\n  });\n\n  data.series.forEach((series) => {\n    series.fields.forEach((field) => {\n      if (field.name != 'id') {\n        field.values.forEach((value, index) => {\n          for (var a in ids) {\n            if (ids[a]._index == index) {\n              ids[a][field.name] = value;\n            }\n          }\n        });\n      }\n    });\n  });\n\n  useEffect(() => {\n    console.log(allElements, ids);\n    allElements.forEach((element) => {\n      \n      if (element.id in ids) {\n        \n        if(element.type=='text') {\n          element.element.textContent = ids[element.id][element.field] + ' ' + element.unit;\n        }\n        if(element.type=='rect') {\n          element.element.style.fill = ids[element.id][element.field]?'lime':'#FF0000';\n        }\n      }\n    });\n  }, [ids, allElements]);\n\n\n  useEffect(() => {\n    fetch('/public/plugins/sa-plugin1-panel/img/scada.svg')\n      .then((response) => response.text())\n      .then((svg) => {\n        if (svgRef.current) {\n          svgRef.current.innerHTML = svg;\n          loadAllElements(svgRef.current);\n          updateColor(svgRef.current, boxColor);\n          console.log('here');\n        }\n      })\n      .catch((error) => console.error('Error loading SVG:', error));\n  }, []);\n\n  const updateColor = (svgElement, newColor) => {\n    if (!svgElement) return;\n    // Make SVG responsive\n    const svgRoot = svgElement.querySelector('svg');\n    if (svgRoot) {\n      svgRoot.setAttribute('width', '100%');\n      svgRoot.setAttribute('height', '100%');\n      svgRoot.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    }\n  };\n\n  const toggleColor = () => {\n    svgRef.current.querySelectorAll('*').forEach((element, index) => {\n      if (element.attributes['inkscape:label']) {\n        if (element.tagName == 'text') {\n          const tspanElement = element.querySelector('tspan');\n          if (tspanElement) {\n            const currentDate = new Date().getSeconds();\n            tspanElement.textContent = new Date().getSeconds();\n            // Center the text\n            // element.setAttribute('text-anchor', 'middle');\n            // element.setAttribute('dominant-baseline', 'middle');\n          }\n        } else {\n          element.style.fill = boxColor;\n        }\n      }\n    });\n    setBoxColor(boxColor === 'red' ? 'blue' : 'red');\n  };\n\n  const loadAllElements = (svgContainer) => {\n    if (!svgContainer) return;\n    const allElements = svgContainer.querySelectorAll('*');\n    var all = [];\n    allElements.forEach((element, index) => {\n      if(element.tagName=='rect') {\n        var label = element.attributes['inkscape:label'];\n        if(label) {\n          \n          if(label.value.startsWith('%')) {\n            var field = label.value.split('@')[1];\n            var id = label.value.split('@')[0].replace('%', '');\n            all.push({\n              element: element,\n              id: id,\n              field: field,\n              type: 'rect',\n            });\n          }\n        }  \n        // all.push({\n        //   element: element,\n        //   id: element.id,\n        //   field: 'value',\n        // }); \n      }\n      if (element.tagName == 'text') {\n        var text = element.textContent;\n        if (text.startsWith('%')) {\n          var id = text.split('@')[0].replace('%', '');\n          var field = text.split('@')[1].split('#')[0];\n          var unit =text.split('@')[1].split('#')[1];\n          all.push({\n            element: element,\n            id: id,\n            field: field,\n            type: 'text',\n            unit,\n          });\n          element.textContent = '';\n        }\n      } \n      // if(element.attributes['inkscape:label']) {\n      //   console.log(element.attributes['inkscape:label'].value, element.tagName);\n      //   all.push({\n      //     id: element.id,\n      //     type: element.tagName,\n      //     label: element.attributes['inkscape:label'].value,\n\n      //   });\n      // }\n    });\n    console.log(all);\n    setAllElements(all);\n  };\n\n  return (\n    <div\n      className={cx(\n        styles.wrapper,\n        css`\n          width: ${width}px;\n          height: ${height}px;\n        `\n      )}\n    >\n      <div ref={svgRef} className={styles.svgContainer} />\n      <div className={styles.controlsContainer}>\n        <Button variant=\"primary\" onClick={toggleColor}>\n          Change to {boxColor === 'red' ? 'Blue' : 'Red'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { PanelPlugin } from '@grafana/data';\nimport { SimpleOptions } from './types';\nimport { SimplePanel } from './components/SimplePanel.jsx';\n\nexport const plugin = new PanelPlugin<SimpleOptions>(SimplePanel).setPanelOptions((builder) => {\n  return builder\n    .addTextInput({\n      path: 'text',\n      name: 'Simple text option',\n      description: 'Description of panel option',\n      defaultValue: 'Default value of text input option',\n    })\n    .addBooleanSwitch({\n      path: 'showSeriesCount',\n      name: 'Show series counter',\n      defaultValue: false,\n    })\n    .addRadio({\n      path: 'seriesCountSize',\n      defaultValue: 'sm',\n      name: 'Series counter size',\n      settings: {\n        options: [\n          {\n            value: 'sm',\n            label: 'Small',\n          },\n          {\n            value: 'md',\n            label: 'Medium',\n          },\n          {\n            value: 'lg',\n            label: 'Large',\n          },\n        ],\n      },\n      showIf: (config) => config.showSeriesCount,\n    });\n});\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","getStyles","wrapper","css","svgContainer","svg","controlsContainer","jsonDisplay","plugin","PanelPlugin","options","data","width","height","fieldConfig","id","styles","useStyles2","boxColor","setBoxColor","useState","svgRef","useRef","allElements","setAllElements","series","length","PanelDataErrorView","panelId","needsStringField","ids","forEach","fields","field","name","values","index","_index","useEffect","element","type","textContent","unit","style","fill","fetch","then","response","text","current","innerHTML","loadAllElements","updateColor","catch","error","console","svgElement","newColor","svgRoot","querySelector","setAttribute","querySelectorAll","all","tagName","label","attributes","startsWith","split","replace","push","div","className","cx","ref","Button","variant","onClick","tspanElement","Date","getSeconds","setPanelOptions","builder","addTextInput","path","description","defaultValue","addBooleanSwitch","addRadio","settings","showIf","config","showSeriesCount"],"sourceRoot":""}